#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1263 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #"; https://docs.racket-lang.org/reference/pairs.html?q=cdr#%28def._%2"
 #"8%28quote._~23~25kernel%29._pair~3f%29%29"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";; PAIR CONSTRUCTORS AND SELECTORS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Returns #t if v is a pair, #f otherwise."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 3 #" #f"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"pair?"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"pair?"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; Returns #t if v is the empty list, #f otherwise."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"null?"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 3 #" #f"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"null?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #f"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"null?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"null?"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 4 #"))) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; Returns a newly allocated pair whose first element is a and secon"
 #"d element is d."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Returns the first element of the pair p."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 2 #" 1"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"car"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 2 #" 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Returns the second element of the pair p."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 3 #"'()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; The empty list."
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 4 #"null"
0 0 17 3 1 #" "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 3 #"'()"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 1 #"'"
0 0 17 3 3 #"() "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 3 #"'()"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"() "
0 0 17 3 4 #"null"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 274
(
 #";; Returns #t if v is a list: either the empty list, or a pair whose"
 #" second element is a list. This procedure effectively takes constant"
 #" time due to internal caching (so that any necessary traversals of p"
 #"airs can in principle count as an extra cost of allocating the pairs"
 #")."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"list?"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"list?"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"()))) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"list?"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 3 #" #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; Returns a newly allocated list containing the vs as its elements."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"4)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"4))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 158
(
 #";; Like list, but the last argument is used as the tail of the resul"
 #"t, instead of the final element. The result is a list only if the la"
 #"st argument is a list."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"list*"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 5 #"list*"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Creates"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 8 #"elements"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 1 #" "
0 0 17 3 8 #"applying"
0 0 17 3 1 #" "
0 0 17 3 4 #"proc"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"integers"
0 0 17 3 1 #" "
0 0 17 3 4 #"from"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 2 #" ("
0 0 17 3 4 #"sub1"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 2 #") "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 6 #"order."
0 0 17 3 1 #" "
0 0 17 3 2 #"If"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 9 #"resulting"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 2 #" ("
0 0 17 3 8 #"list-ref"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 8 #"produced"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 2 #" ("
0 0 17 3 4 #"proc"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 2 #")."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 10 #"build-list"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 6 #"values"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 2 #"9)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 10 #"build-list"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 1 #"x"
0 0 17 3 3 #") ("
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 4 #"))) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 1 #" "
0 0 17 3 3 #"16)"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";; LIST OPERATIONS "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Returns the number of elements in lst."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 6 #"length"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 2 #" 4"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"()) "
0 0 17 3 1 #"="
0 0 17 3 2 #" 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 185
(
 #";; Returns the element of lst a"
 #"t position pos, where the list\342\200\231s first element is positio"
 #"n 0. If the list has pos or fewer elements, then the exn:fail:contra"
 #"ct exception is raised. The"
) 0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 8 #"argument"
0 0 17 3 1 #" "
0 0 17 3 4 #"need"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 8 #"actually"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 5 #" list"
0 0 17 3 66
#"; lst must merely start with a chain of at least (add1 pos) pairs."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 8 #"list-ref"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 2 #"'a"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 8 #"list-ref"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 2 #"'b"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 8 #"list-ref"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 2 #"'c"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 8 #"list-ref"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 2 #" 1"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 8 #"list-ref"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 9 #"EXCEPTION"
0 0 17 3 1 #" "
0 0 17 3 2 #"IS"
0 0 17 3 7 #" RAISED"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 149
(
 #";; Returns the list after the first pos elements of lst. If the list"
 #" has fewer than pos elements, then the exn:fail:contract exception i"
 #"s raised. The"
) 0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 8 #"argument"
0 0 17 3 1 #" "
0 0 17 3 4 #"need"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 8 #"actually"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 5 #" list"
0 0 17 3 59
#"; lst must merely start with a chain of at least pos pairs."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 9 #"list-tail"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 2 #"9)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 9 #"list-tail"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 2 #" 2"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 9 #"list-tail"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 9 #"EXCEPTION"
0 0 17 3 1 #" "
0 0 17 3 2 #"IS"
0 0 17 3 7 #" RAISED"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 9 #"list-tail"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 10 #"not-a-pair"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 11 #"'not-a-pair"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";; When given all list arguments, the result is a list that contains"
 #" all of the elements of the given lists in order. The last argument "
 #"is used directly in the tail of the result. The"
) 0 0 17 3 1 #" "
0 0 17 3 4 #"last"
0 0 17 3 1 #" "
0 0 17 3 8 #"argument"
0 0 17 3 1 #" "
0 0 17 3 4 #"need"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 4 #"case"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 11 #"\342\200\234improper"
0 0 17 3 9 #" list.\342\200\235"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 6 #"append"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 16 #"4)) = '(1 2 3 4)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 6 #"append"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"5 "
0 0 17 3 1 #"6"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 22 #"8)) '(1 2 3 4 5 6 7 8)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; Returns a list that has the same elements as lst, but in reverse "
 #"order."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 7 #"reverse"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";; LIST ITERATION"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 285
(
 #";; Applies proc to the elements of the lsts from the first elements "
 #"to the last. The proc argument must accept the same number of argume"
 #"nts as the number of supplied lsts, and all lsts must have the same "
 #"number of elements. The result is a list containing each result of p"
 #"roc in order."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"map"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 6 #"number"
0 0 17 3 2 #")("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 6 #"number"
0 0 17 3 2 #"))"
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #")) "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"5)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"map"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 7 #"number1"
0 0 17 3 1 #" "
0 0 17 3 7 #"number2"
0 0 17 3 2 #")("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 7 #"number1"
0 0 17 3 1 #" "
0 0 17 3 7 #"number2"
0 0 17 3 2 #"))"
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #")"
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 4 #"1000"
0 0 17 3 1 #" "
0 0 17 3 30 #"10000)) = '(11 102 1003 10004)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 453
(
 #";; Similar to map in the sense that proc is applied to each element "
 #"of lst, but 1) the result is #f if any application of proc produces "
 #"#f, in which case proc is not applied to later elements of the lsts;"
 #" and 2) the result is that of proc applied to the last elements of t"
 #"he lsts; more specifically, the application of proc to the last elem"
 #"ents in the lsts is in tail position with respect to the andmap call"
 #". If the lsts are empty, then #t is returned."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 24 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 24 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"EXCEPTION"
0 0 24 3 1 #" "
0 0 14 3 2 #"IS"
0 0 24 3 1 #" "
0 0 14 3 6 #"RAISED"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 24 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";(+ 2 3)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(cons 3 5)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(+ 3 5)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(+'3 5 1 2)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";(cons 3 (cons 5 (cons 7 (cons 8 null))))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";'(+ 3 4)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(eval '(+ 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(quote (+ 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(cons 2 null)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(cons 1 (cons 2 null))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(car '(1 . 2))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(cdr '(1 . 2))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(car '(1 2 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(cdr '(1 2 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(car (cdr '(1 2 3 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(cadr '(1 2 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(caddr '(1 2 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";((lambda (x y) (+ x y 1)) 3 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(equal? 5 \"Damien\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(equal? 1 1)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(< 2 1)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(>= 2 1)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(- 7 2)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(+ 5 2)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(sqrt 16)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(sqrt -16)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(string? \"Research Centrum\")"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(number? 5)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(number? \"Research Centrum\")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(string-length \"Damien Bayes\")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(substring \"Damien Bayes\" 0 6)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(string-append \"rope\" \"twine\" \"yarn\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";\"Hello, Damien Bayes!\""
0 0 24 29 1 #"\n"
0 0 17 3 28 #";\"Benjamin \\\"Bugsy\\\" Siegel\""
0 0 24 29 1 #"\n"
0 0 17 3 32 #";\"Bugs \\u0022Figaro\\u0022 Bunny\""
0 0 24 29 1 #"\n"
0 0 17 3 24
#";\"\316\273x:(\316\274\316\261.\316\261\342\206\222\316\261).xx\""
0 0 24 29 1 #"\n"
0 0 17 3 2 #";1"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";1/2"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";1+2i"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";3.14"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";6.02e+23"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";9999999999999999999999"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";1.0000"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";> 5"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";\"Hello, world!\""
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(substring \"the boy out of the country\" 4 7)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(substring \"Simple Scheme\" 0 6)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(number? 5)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(string? \"Racket\")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(print \"String\")"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(sqrt 4)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(string-length \"Prague\")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(string-append \"Apple\" \"&Pear\")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(equal? 6 6)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(regexp-quote \"cons\")"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(if (> 2 3)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";    \"bigger\""
0 0 24 29 1 #"\n"
0 0 17 3 15 #";    \"smaller\")"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(> 2 3)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(let ([x (random 4)]"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";      [y (random 4)])"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    [(> x y) \"X wins\"]"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    [(> y x) \"Y wins\"]"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    [else \"cat's game\"]))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(let* ([x (random 4)]"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";       [y (random 4)]"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";       [diff (number->string (abs (- x y)))])"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";    [(> x y) (string-append \"X wins by \" diff)]"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";    [(> y x) (string-append \"Y wins by \" diff)]"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    [else \"cat's game\"]))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(list \"red\" \"green\" \"blue\")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(list 1 2 3 18 10)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(length (list \"hop\" \"skip\" \"jump\"))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(list-ref (list \"hop\" \"skip\" \"jump\") 0)"
0 0 24 29 1 #"\n"
0 0 17 3 52
#";(append (list \"hop\" \"skip\") (list \"appended jump\"))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(reverse (list \"hop\" \"skip\" \"jump\"))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(member \"fall\" (list \"hop\" \"skip\" \"jump\"))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(map (lambda (i)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";       (string-append i \"!\"))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";     (list \"peanuts\" \"popcorn\" \"cracker-jack\"))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(map sqrt (list 1 4 9 16))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(andmap string? (list \"a\" \"b\" \"c\"))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(ormap number? (list \"a\" \"b\" 6))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(map (lambda (s n) (substring s 0 n))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";     (list \"peanuts\" \"popcorn\" \"cracker-jack\")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";     (list 6 3 7))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(filter positive? (list 1 -2 6 7 0))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(filter string? (list \"a\" \"b\" 6))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(foldl (lambda (elem v)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";         (+ v (* elem elem)))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";       0"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";       '(1 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(first (list 1 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(rest (list 1 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";empty"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(cons \"head\" empty)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(cons \"dead\" (cons \"head\" empty))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(empty? empty)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(empty? (cons \"head\" empty))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(quote ((1) (2 3) (4)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(map sqrt (list 1 4 9 16))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(= 2 (+ 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(if \"no\" 1 0)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";#x03BB"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";#e0.5"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(/ 1 2)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(inexact->exact 0.1)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(sin 0)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(sin 1/2)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";(time (round (sigma (lambda (x) (/ 1 x)) 1 2000)))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(abs -5)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(sin -5+2i)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(eqv? 1 1.0)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";\"\\u03BB\""
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; -----------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0           0
